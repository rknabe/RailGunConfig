package com.rkade;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.List;
import java.util.Objects;
import java.util.logging.Logger;

public class MainForm extends BaseForm implements DeviceListener, ActionListener, FocusListener, ChangeListener {
    private final static Logger logger = Logger.getLogger(MainForm.class.getName());
    private JPanel mainPanel;
    private JPanel ffbTab;
    private JPanel bottomPanel;
    private JLabel deviceLabel;
    private JLabel statusLabel;
    private JComboBox<String> rangeComboBox;
    private JButton centerButton;
    private JTextField velocityText;
    private JTextField accText;
    private JLabel degreesLabel;
    private JPanel topPanel;
    private JLabel wheelIconLabel;
    private JTextField wheelRawTextField;
    private JTextField valueText;
    private JLabel firmwareLabel;
    private AxisPanel axis1Panel;
    private AxisPanel axis2Panel;
    private AxisPanel axis3Panel;
    private AxisPanel axis4Panel;
    private AxisPanel axis5Panel;
    private AxisPanel axis6Panel;
    private JPanel axesTab;
    private JButton defaultsButton;
    private JButton loadButton;
    private JButton saveButton;
    private JButton autoCenterButton;
    private JPanel gainsPanel;
    private JButton constantLeftButton;
    private JButton sineButton;
    private JButton springButton;
    private JButton frictionButton;
    private JButton rampButton;
    private JButton sawtoothUpButton;
    private JButton sawtoothDownButton;
    private JButton inertiaButton;
    private JButton damperButton;
    private JButton triangleButton;
    private JButton constantRightButton;
    private JFormattedTextField maxVelocityFrictionText;
    private JFormattedTextField maxVelocityInertiaText;
    private JFormattedTextField minForceText;
    private JSlider minForceSlider;
    private JSlider maxForceSlider;
    private JFormattedTextField maxForceText;
    private JFormattedTextField cutForceText;
    private JSlider cutForceSlider;
    private JComboBox<String> frequencyCombo;
    private JFormattedTextField maxVelocityDamperText;
    private JLabel minForceLabel;
    private JLabel maxForceLabel;
    private JLabel cutForceLabel;
    private JCheckBox constantSpringCheckBox;
    private ButtonsPanel buttonsPanel;
    private JPanel axisPanelParent;
    private JButton btnCalibrate;
    private JButton button2;
    private JPanel buttonsTab;
    private JCheckBox afcCheckBox;
    private Device device = null;
    private volatile boolean isWaitingOnDevice = false;
    private final AxisPanel axisPanel = new AxisPanel();

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    public MainForm() {
        try {
            //ImageIcon imageIcon = new ImageIcon(ClassLoader.getSystemResource("wheel55.png"));
            //wheelImage = toBufferedImage(imageIcon.getImage());
            //wheelIconLabel.setIcon(imageIcon);
        } catch (Exception ex) {
            logger.warning(ex.getMessage());
        }

        axisPanelParent.add(axisPanel);

        controls = List.of(btnCalibrate);

        //setupAxisPanels();
        // setupGainPanels();
        setupControlListener();
        setPanelEnabled(false);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        boolean status = handleAction(e);
        if (!status) {
            logger.warning("Action failed for:" + e.getActionCommand());
        }
    }

    private boolean handleAction(ActionEvent e) {
        if (device != null) {
            if (Objects.equals(e.getActionCommand(), btnCalibrate.getActionCommand())) {
                btnCalibrate.setText("Calibrating...");
            }
        }
        return true;
    }

    private void showWaitDialog() {
        JLabel validator = new JLabel("<html><body>Please wait, this may take up to 1 minute.</body></html>");
        JOptionPane pane = new JOptionPane(validator, JOptionPane.INFORMATION_MESSAGE, JOptionPane.DEFAULT_OPTION,
                null, new Object[]{}, null);
        final JDialog dialog = pane.createDialog(mainPanel, "Loading Settings...");
        dialog.setModal(true);
        dialog.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        SwingWorker<Void, Void> worker = new SwingWorker<>() {
            public Void doInBackground() {
                setPanelEnabled(false);
                int seconds = 0;
                isWaitingOnDevice = true;
                do {
                    try {
                        Thread.sleep(1000);
                        validator.setText(String.format("<html><body>Please wait, this may take up to 1 minute.<br/>Elapsed Seconds: %d</body></html>", ++seconds));
                    } catch (InterruptedException ignored) {
                    }
                } while (isWaitingOnDevice);
                dialog.setVisible(false);
                setPanelEnabled(true);
                return null;
            }
        };
        isWaitingOnDevice = true;
        worker.execute();
        dialog.setVisible(true);
        isWaitingOnDevice = true;
    }

    private boolean handleFocusLost(FocusEvent e) {
        if (device != null) {
        }
        return true;
    }

    @Override
    public void focusLost(FocusEvent e) {
        boolean status = handleFocusLost(e);
        if (!status) {
            logger.warning("Focus lost, failed for:" + e.getSource());
        }
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        if (device != null) {

        }
    }

    @Override
    public void deviceAttached(Device device) {
        this.device = device;
        deviceLabel.setText(device.getName());
        firmwareLabel.setText(device.getFirmwareType() + ":" + device.getFirmwareVersion());
        setPanelEnabled(true);
        buttonsPanel.deviceAttached(device);
    }

    @Override
    public void deviceDetached(Device device) {
        deviceLabel.setText("");
        firmwareLabel.setText("");
        this.device = null;
        setPanelEnabled(false);
        buttonsPanel.deviceDetached(device);
    }

    @Override
    public void deviceUpdated(Device device, String status, DataReport report) {
        if (status != null) {
            statusLabel.setText(status);
        }

        if (report != null) {
            //if (report.getReportType() == Device.DATA_REPORT_ID) {
            switch (report) {
                case ButtonsDataReport buttonsData -> buttonsPanel.deviceUpdated(device, status, buttonsData);
                case SettingsDataReport settings -> {
                    firmwareLabel.setText(settings.getId() + ":" + settings.getVersion());
                    axisPanel.setXAxisMinimum(settings.getXAxisMinimum());
                    axisPanel.setXAxisMaximum(settings.getXAxisMaximum());
                    axisPanel.setYAxisMinimum(settings.getYAxisMinimum());
                    axisPanel.setYAxisMaximum(settings.getYAxisMaximum());
                }
                case AxisDataReport axisData -> axisPanel.deviceUpdated(device, status, axisData);
                default -> {
                }
            }
            //}
            if (isWaitingOnDevice) {
                isWaitingOnDevice = false;
            }
        }
    }

    public JComponent getRootComponent() {
        return mainPanel;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());
        mainPanel.setMinimumSize(new Dimension(1060, 400));
        mainPanel.setPreferredSize(new Dimension(1060, 800));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        axesTab = new JPanel();
        axesTab.setLayout(new BorderLayout(0, 0));
        axesTab.setMinimumSize(new Dimension(1060, 60));
        axesTab.setPreferredSize(new Dimension(1060, 800));
        topPanel = new JPanel();
        topPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        topPanel.setAutoscrolls(true);
        topPanel.setMaximumSize(new Dimension(32767, 32767));
        topPanel.setMinimumSize(new Dimension(1040, 60));
        topPanel.setPreferredSize(new Dimension(1040, 890));
        topPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLoweredBevelBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        rangeComboBox = new JComboBox();
        rangeComboBox.setActionCommand("rangeChanged");
        rangeComboBox.setEditable(true);
        rangeComboBox.setMinimumSize(new Dimension(100, 30));
        rangeComboBox.setPreferredSize(new Dimension(97, 30));

        centerButton = new JButton();
        centerButton.setPreferredSize(new Dimension(75, 30));
        centerButton.setText("Center");

        autoCenterButton = new JButton();
        autoCenterButton.setActionCommand("autoCenter");
        autoCenterButton.setMaximumSize(new Dimension(105, 34));
        autoCenterButton.setMinimumSize(new Dimension(105, 34));
        autoCenterButton.setPreferredSize(new Dimension(100, 34));
        autoCenterButton.setText("AutoCenter");

        wheelIconLabel = new JLabel();
        wheelIconLabel.setAlignmentY(0.0f);
        wheelIconLabel.setDoubleBuffered(true);
        wheelIconLabel.setFocusable(false);
        wheelIconLabel.setMinimumSize(new Dimension(55, 55));
        wheelIconLabel.setPreferredSize(new Dimension(55, 55));
        wheelIconLabel.setRequestFocusEnabled(false);
        wheelIconLabel.setText("");
        wheelIconLabel.setVerticalAlignment(1);

        degreesLabel = new JLabel();
        degreesLabel.setFocusable(false);
        degreesLabel.setHorizontalTextPosition(2);
        degreesLabel.setPreferredSize(new Dimension(50, 31));
        degreesLabel.setText("00.00°");

        wheelRawTextField = new JTextField();
        wheelRawTextField.setEditable(false);
        wheelRawTextField.setFocusable(false);
        wheelRawTextField.setMinimumSize(new Dimension(25, 30));
        wheelRawTextField.setPreferredSize(new Dimension(55, 30));

        valueText = new JTextField();
        valueText.setEditable(false);
        valueText.setFocusable(false);
        valueText.setMinimumSize(new Dimension(25, 30));
        valueText.setPreferredSize(new Dimension(55, 30));
        final JLabel label1 = new JLabel();
        label1.setFocusable(false);
        label1.setText("Velocity");

        velocityText = new JTextField();
        velocityText.setEditable(false);
        velocityText.setFocusable(false);
        velocityText.setMinimumSize(new Dimension(25, 30));
        velocityText.setPreferredSize(new Dimension(55, 30));

        accText = new JTextField();
        accText.setEditable(false);
        accText.setFocusable(false);
        accText.setPreferredSize(new Dimension(55, 30));

        ffbTab = new JPanel();
        ffbTab.setLayout(new BorderLayout(0, 0));
        ffbTab.setAutoscrolls(false);
        ffbTab.setMinimumSize(new Dimension(1060, 60));
        ffbTab.setPreferredSize(new Dimension(1060, 800));
        gainsPanel = new JPanel();
        gainsPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        gainsPanel.setMinimumSize(new Dimension(570, 650));
        gainsPanel.setPreferredSize(new Dimension(575, 650));
        gainsPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Effect Gains", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));

        final JLabel label2 = new JLabel();
        label2.setHorizontalAlignment(4);
        label2.setMinimumSize(new Dimension(100, 17));
        label2.setPreferredSize(new Dimension(100, 17));
        label2.setText("Min Force");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.EAST;
        final JLabel label3 = new JLabel();
        label3.setHorizontalAlignment(4);
        label3.setMinimumSize(new Dimension(100, 17));
        label3.setPreferredSize(new Dimension(100, 17));
        label3.setText("Max Force");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.anchor = GridBagConstraints.EAST;
        final JLabel label4 = new JLabel();
        label4.setHorizontalAlignment(4);
        label4.setMinimumSize(new Dimension(100, 17));
        label4.setPreferredSize(new Dimension(100, 17));
        label4.setText("Cut Force");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.anchor = GridBagConstraints.EAST;

        minForceText = new JFormattedTextField();
        minForceText.setMinimumSize(new Dimension(75, 30));
        minForceText.setPreferredSize(new Dimension(75, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;

        maxForceText = new JFormattedTextField();
        maxForceText.setMinimumSize(new Dimension(75, 30));
        maxForceText.setPreferredSize(new Dimension(75, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 4;

        cutForceText = new JFormattedTextField();
        cutForceText.setMinimumSize(new Dimension(75, 30));
        cutForceText.setPreferredSize(new Dimension(75, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 5;

        minForceLabel = new JLabel();
        minForceLabel.setText("0%");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;

        maxForceLabel = new JLabel();
        maxForceLabel.setText("100%");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 4;
        gbc.anchor = GridBagConstraints.WEST;

        cutForceLabel = new JLabel();
        cutForceLabel.setText("100%");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 5;
        gbc.anchor = GridBagConstraints.WEST;

        minForceSlider = new JSlider();
        minForceSlider.setMajorTickSpacing(1024);
        minForceSlider.setMaximum(16383);
        minForceSlider.setMinimumSize(new Dimension(140, 24));
        minForceSlider.setMinorTickSpacing(0);
        minForceSlider.setPaintTicks(true);
        minForceSlider.setPaintTrack(true);
        minForceSlider.setPreferredSize(new Dimension(140, 24));
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;

        maxForceSlider = new JSlider();
        maxForceSlider.setMajorTickSpacing(1024);
        maxForceSlider.setMaximum(16383);
        maxForceSlider.setMinimumSize(new Dimension(140, 24));
        maxForceSlider.setMinorTickSpacing(0);
        maxForceSlider.setPaintTicks(true);
        maxForceSlider.setPaintTrack(true);
        maxForceSlider.setPreferredSize(new Dimension(140, 24));
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 4;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;

        cutForceSlider = new JSlider();
        cutForceSlider.setMajorTickSpacing(1024);
        cutForceSlider.setMaximum(16383);
        cutForceSlider.setMinimumSize(new Dimension(140, 24));
        cutForceSlider.setMinorTickSpacing(0);
        cutForceSlider.setPaintTicks(true);
        cutForceSlider.setPaintTrack(true);
        cutForceSlider.setPreferredSize(new Dimension(140, 24));
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 5;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;

        final JLabel label5 = new JLabel();
        label5.setText("PWM bitdepth/frequency");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 6;

        frequencyCombo = new JComboBox();
        frequencyCombo.setActionCommand("changeFfbBd");
        frequencyCombo.setPreferredSize(new Dimension(100, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 6;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;

        final JLabel label6 = new JLabel();
        label6.setHorizontalAlignment(4);
        label6.setMinimumSize(new Dimension(170, 17));
        label6.setPreferredSize(new Dimension(170, 17));
        label6.setText("Max Velocity for Damper");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;

        final JLabel label7 = new JLabel();
        label7.setHorizontalAlignment(4);
        label7.setMinimumSize(new Dimension(170, 17));
        label7.setPreferredSize(new Dimension(170, 17));
        label7.setText("Max Velocity for Friction");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;

        final JLabel label8 = new JLabel();
        label8.setHorizontalAlignment(4);
        label8.setMinimumSize(new Dimension(170, 17));
        label8.setPreferredSize(new Dimension(170, 17));
        label8.setText("Max Velocity for Inertia");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;

        maxVelocityFrictionText = new JFormattedTextField();
        maxVelocityFrictionText.setMinimumSize(new Dimension(75, 30));
        maxVelocityFrictionText.setPreferredSize(new Dimension(75, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;

        maxVelocityInertiaText = new JFormattedTextField();
        maxVelocityInertiaText.setMinimumSize(new Dimension(75, 30));
        maxVelocityInertiaText.setPreferredSize(new Dimension(75, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;

        maxVelocityDamperText = new JFormattedTextField();
        maxVelocityDamperText.setMinimumSize(new Dimension(75, 30));
        maxVelocityDamperText.setPreferredSize(new Dimension(75, 30));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;

        afcCheckBox = new JCheckBox();
        afcCheckBox.setLabel("AutoCenter at Startup");
        afcCheckBox.setText("AutoCenter at Startup");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 8;
        gbc.anchor = GridBagConstraints.WEST;

        constantSpringCheckBox = new JCheckBox();
        constantSpringCheckBox.setHorizontalAlignment(0);
        constantSpringCheckBox.setLabel("Constant Spring");
        constantSpringCheckBox.setText("Constant Spring");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 7;
        gbc.anchor = GridBagConstraints.WEST;

        constantLeftButton = new JButton();
        constantLeftButton.setMaximumSize(new Dimension(153, 30));
        constantLeftButton.setMinimumSize(new Dimension(153, 30));
        constantLeftButton.setPreferredSize(new Dimension(153, 30));
        constantLeftButton.setText("Constant Pull Left");
        constantLeftButton.setVerticalAlignment(0);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;

        constantRightButton = new JButton();
        constantRightButton.setMaximumSize(new Dimension(153, 30));
        constantRightButton.setMinimumSize(new Dimension(153, 30));
        constantRightButton.setPreferredSize(new Dimension(153, 30));
        constantRightButton.setText("Constant Pull Right");
        constantRightButton.setVerticalAlignment(0);
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;

        rampButton = new JButton();
        rampButton.setMaximumSize(new Dimension(153, 30));
        rampButton.setMinimumSize(new Dimension(153, 30));
        rampButton.setPreferredSize(new Dimension(153, 30));
        rampButton.setText("Ramp");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;

        sineButton = new JButton();
        sineButton.setMaximumSize(new Dimension(153, 30));
        sineButton.setMinimumSize(new Dimension(153, 30));
        sineButton.setPreferredSize(new Dimension(153, 30));
        sineButton.setText("Sine");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;

        triangleButton = new JButton();
        triangleButton.setMaximumSize(new Dimension(153, 30));
        triangleButton.setMinimumSize(new Dimension(153, 30));
        triangleButton.setPreferredSize(new Dimension(153, 30));
        triangleButton.setText("Triangle");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;

        sawtoothUpButton = new JButton();
        sawtoothUpButton.setMaximumSize(new Dimension(153, 30));
        sawtoothUpButton.setMinimumSize(new Dimension(153, 30));
        sawtoothUpButton.setPreferredSize(new Dimension(153, 30));
        sawtoothUpButton.setText("Sawtooth Up");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;

        sawtoothDownButton = new JButton();
        sawtoothDownButton.setMaximumSize(new Dimension(153, 30));
        sawtoothDownButton.setMinimumSize(new Dimension(153, 30));
        sawtoothDownButton.setPreferredSize(new Dimension(153, 30));
        sawtoothDownButton.setText("Sawtooth Down");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;

        springButton = new JButton();
        springButton.setMaximumSize(new Dimension(153, 30));
        springButton.setMinimumSize(new Dimension(153, 30));
        springButton.setPreferredSize(new Dimension(153, 30));
        springButton.setText("Spring");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;

        damperButton = new JButton();
        damperButton.setMaximumSize(new Dimension(153, 30));
        damperButton.setMinimumSize(new Dimension(153, 30));
        damperButton.setPreferredSize(new Dimension(153, 30));
        damperButton.setText("Damper");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;

        inertiaButton = new JButton();
        inertiaButton.setMaximumSize(new Dimension(153, 30));
        inertiaButton.setMinimumSize(new Dimension(153, 30));
        inertiaButton.setPreferredSize(new Dimension(153, 30));
        inertiaButton.setText("Inertia");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 4;

        frictionButton = new JButton();
        frictionButton.setMaximumSize(new Dimension(153, 30));
        frictionButton.setMinimumSize(new Dimension(153, 30));
        frictionButton.setPreferredSize(new Dimension(153, 30));
        frictionButton.setText("Friction");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 5;

        buttonsTab = new JPanel();
        buttonsTab.setLayout(new BorderLayout(0, 0));
        buttonsPanel = new ButtonsPanel();
        buttonsTab.add(buttonsPanel.$$$getRootComponent$$$(), BorderLayout.WEST);
        bottomPanel = new JPanel();
        bottomPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 4, 4));
        bottomPanel.setAutoscrolls(false);
        bottomPanel.setMinimumSize(new Dimension(1060, 75));
        bottomPanel.setPreferredSize(new Dimension(1065, 75));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(bottomPanel, gbc);
        bottomPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createRaisedBevelBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new FlowLayout(FlowLayout.LEFT, 4, 4));
        panel1.setPreferredSize(new Dimension(445, 32));
        bottomPanel.add(panel1);
        panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        deviceLabel = new JLabel();
        deviceLabel.setEnabled(true);
        deviceLabel.setHorizontalAlignment(2);
        deviceLabel.setMinimumSize(new Dimension(145, 20));
        deviceLabel.setPreferredSize(new Dimension(145, 20));
        deviceLabel.setText("Device");
        panel1.add(deviceLabel);
        firmwareLabel = new JLabel();
        firmwareLabel.setEnabled(true);
        firmwareLabel.setFocusable(false);
        firmwareLabel.setHorizontalAlignment(4);
        firmwareLabel.setMaximumSize(new Dimension(70, 17));
        firmwareLabel.setMinimumSize(new Dimension(60, 17));
        firmwareLabel.setPreferredSize(new Dimension(70, 20));
        firmwareLabel.setText("Firmware:");
        panel1.add(firmwareLabel);
        statusLabel = new JLabel();
        statusLabel.setEnabled(true);
        statusLabel.setFocusable(false);
        statusLabel.setHorizontalAlignment(2);
        statusLabel.setMinimumSize(new Dimension(130, 20));
        statusLabel.setPreferredSize(new Dimension(130, 20));
        statusLabel.setRequestFocusEnabled(true);
        statusLabel.setText("Device Not Found...");
        panel1.add(statusLabel);
        defaultsButton = new JButton();
        defaultsButton.setActionCommand("resetDefaults");
        defaultsButton.setMaximumSize(new Dimension(196, 30));
        defaultsButton.setMinimumSize(new Dimension(196, 30));
        defaultsButton.setPreferredSize(new Dimension(196, 30));
        defaultsButton.setText("Reset Settings to Defaults");
        bottomPanel.add(defaultsButton);
        loadButton = new JButton();
        loadButton.setActionCommand("loadEEPROM");
        loadButton.setMaximumSize(new Dimension(196, 30));
        loadButton.setMinimumSize(new Dimension(196, 30));
        loadButton.setPreferredSize(new Dimension(196, 30));
        loadButton.setText("Load Settings From EEPROM");
        bottomPanel.add(loadButton);
        saveButton = new JButton();
        saveButton.setActionCommand("saveSettings");
        saveButton.setHorizontalAlignment(0);
        saveButton.setMaximumSize(new Dimension(196, 30));
        saveButton.setMinimumSize(new Dimension(196, 30));
        saveButton.setPreferredSize(new Dimension(196, 30));
        saveButton.setText("Save Settings to EEPROM");
        bottomPanel.add(saveButton);
        label1.setLabelFor(velocityText);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
